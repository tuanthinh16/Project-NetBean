/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dragdrop;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author AnhTu
 */
public class FileChooserDemo extends javax.swing.JFrame {

    /**
     * Creates new form FileChooserDemo
     */
    private static final int FILE_OPEN = 1;
    private static final int FILE_SAVE = 2;
    private boolean changed = false; //nếu file thay đổi thì changed = true

    /*
    chú ý biến changed: 
    sau khi new phải cho changed = false
    sau khi open phải cho changed = false
    sau khi save phải cho changed = false
     */

    public FileChooserDemo() {
        initComponents();
        setLocation(200, 300);
        tafile.setLineWrap(true);
        tafile.setWrapStyleWord(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tafile = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        minew = new javax.swing.JMenuItem();
        miopen = new javax.swing.JMenuItem();
        misave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miexit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miundo = new javax.swing.JMenuItem();
        miredo = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        cb_wrap_word = new javax.swing.JCheckBoxMenuItem();
        cb_wrap_line = new javax.swing.JCheckBoxMenuItem();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tafile.setColumns(20);
        tafile.setRows(5);
        tafile.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tafile.setDragEnabled(true);
        tafile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tafileKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tafile);

        jMenu1.setText("File");

        minew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        minew.setText("New");
        minew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minewActionPerformed(evt);
            }
        });
        jMenu1.add(minew);

        miopen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miopen.setText("Open");
        miopen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miopenActionPerformed(evt);
            }
        });
        jMenu1.add(miopen);

        misave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        misave.setText("Save");
        misave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                misaveActionPerformed(evt);
            }
        });
        jMenu1.add(misave);
        jMenu1.add(jSeparator1);

        miexit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        miexit.setText("Exit");
        miexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miexitActionPerformed(evt);
            }
        });
        jMenu1.add(miexit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        miundo.setText("Undo");
        miundo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miundoActionPerformed(evt);
            }
        });
        jMenu2.add(miundo);

        miredo.setText("Redo");
        jMenu2.add(miredo);
        jMenu2.add(jSeparator2);

        cb_wrap_word.setSelected(true);
        cb_wrap_word.setText("Wrap word");
        cb_wrap_word.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cb_wrap_wordStateChanged(evt);
            }
        });
        cb_wrap_word.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_wrap_wordActionPerformed(evt);
            }
        });
        jMenu2.add(cb_wrap_word);

        cb_wrap_line.setSelected(true);
        cb_wrap_line.setText("Wrap line");
        cb_wrap_line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_wrap_lineActionPerformed(evt);
            }
        });
        jMenu2.add(cb_wrap_line);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void minewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minewActionPerformed
        //JOptionPane.showMessageDialog(null, "new is created");
        if (changed == true) { //nếu như thay đổi(ấn thêm 1 kí tự bất kì) vào file hiện tại thì khi ấn new, ta phải hỏi xem có muốn save file cũ trước ko
            int kq = JOptionPane.showConfirmDialog(null, "Bạn có muốn lưu ko?");
            if (kq == JOptionPane.YES_OPTION) //nếu ấn Yes thì lưu
            {
                operateFile("Save a file(lưu tệp)", FILE_SAVE, 1);
            }
        }
        tafile.setText("");
        tafile.requestFocus();
        this.setTitle("");
        changed = false;
    }//GEN-LAST:event_minewActionPerformed

    private void miopenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miopenActionPerformed
        //JOptionPane.showMessageDialog(null, "Opened successfully");
        if (changed == true) {
            int kq = JOptionPane.showConfirmDialog(null, "Trước khi mở 1 file mới, bạn có muốn lưu file hiện tại ko?");
            if (kq == JOptionPane.YES_OPTION) {
                operateFile("Save a file(lưu tệp)", FILE_SAVE, 1);
            }
        }
        operateFile("Open a file(mở 1 tệp)", FILE_OPEN, 2);
        changed = false;
    }//GEN-LAST:event_miopenActionPerformed

    private void misaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_misaveActionPerformed
        //JOptionPane.showMessageDialog(null, "Save successfully");
        operateFile("Save a file(lưu tệp)", FILE_SAVE, 2);
    }//GEN-LAST:event_misaveActionPerformed

    private void miexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miexitActionPerformed
        int kq = JOptionPane.showConfirmDialog(null, "Bạn có muốn save trước khi thoát ko?");
        if (kq == JOptionPane.YES_OPTION) {
            operateFile("Lưu trước khi thoát nè!", FILE_SAVE, 1);
        }
        System.exit(0);
    }//GEN-LAST:event_miexitActionPerformed

    private void tafileKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tafileKeyTyped
        changed = true; //khi gõ thêm bất kì 1 kí tự nào vào text area thì thay đổi changed = true
    }//GEN-LAST:event_tafileKeyTyped

    private void cb_wrap_wordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_wrap_wordActionPerformed
        tafile.setWrapStyleWord(!tafile.getWrapStyleWord());
        //hoặc cách khác:
        //tafile.setWrapStyleWord(cb_wrap_word.isSelected());
        tafile.setText(tafile.getText()); //sau khi thay đổi phải set lại text của text area
    }//GEN-LAST:event_cb_wrap_wordActionPerformed

    private void cb_wrap_lineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_wrap_lineActionPerformed
        tafile.setLineWrap(!tafile.getLineWrap());
        tafile.setText(tafile.getText()); //sau khi thay đổi phải set lại text của text area
    }//GEN-LAST:event_cb_wrap_lineActionPerformed

    private void cb_wrap_wordStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cb_wrap_wordStateChanged
        //tafile.setLineWrap(!tafile.getLineWrap());
    }//GEN-LAST:event_cb_wrap_wordStateChanged

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //ko làm j
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        if (changed == true) {
            int kq = JOptionPane.showConfirmDialog(null, "Bạn có muốn save trước khi thoát ko?");
            if (kq == JOptionPane.YES_OPTION) {
                operateFile("Lưu trước khi thoát nè!", FILE_SAVE, 1);
            }
        }
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        changed = false;
    }//GEN-LAST:event_formWindowOpened

    private void miundoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miundoActionPerformed

    }//GEN-LAST:event_miundoActionPerformed

    private void operateFile(String title, int type, int order) { //order = 1 thì lưu mà ko hỏi, order = 2 thì hỏi trước khi lưu
        JFileChooser chooser = new JFileChooser();
        int choose = -1;
        chooser.setDialogTitle(title);
        switch (type) {
            case FILE_OPEN:
                choose = chooser.showOpenDialog(null);  //hiển thị hộp thoại mở 1 file thông thường
                break;
            case FILE_SAVE:
                choose = chooser.showSaveDialog(null);  //hiển thị hộp thoại lưu 1 file thông thường
                break;
        }
        if (choose == JFileChooser.APPROVE_OPTION) {  //APPROVE_OPTION là khi ta nhấn nút save hoặc open, bây giờ xét 2 trường hợp ý:
            File file = chooser.getSelectedFile();
            switch (type) {  //xét 2 trường hợp xem là đã ấn nút save hay open
                case FILE_OPEN: {
                    readFile(file);
                    this.setTitle(file.getName());  //hien thi ten cua file khi open file ddoos
                }
                break;
                case FILE_SAVE: {
                    if (order == 2) {
                        int kq = JOptionPane.showConfirmDialog(null, "Bạn có thực sự muốn lưu file?");
                        if (kq == JOptionPane.YES_OPTION) {
                            writeFile(file);
                            this.setTitle(file.getName());
                        }
                    } else {
                        writeFile(file);
                        this.setTitle(file.getName());
                    }
                }
                break;
            }
        }
    }

    private void readFile(File file) {
        tafile.setText("");
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String line;
            while ((line = br.readLine()) != null) {
                tafile.append(line + "\n");
            }
            br.close();
            fr.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FileChooserDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FileChooserDemo.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void writeFile(File file) {
        try {
            file.createNewFile();
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            String data = tafile.getText();
            bw.write(data);
            bw.close();
            fw.close();
            changed = false; //lưu xong file phải cho changed = false , lý do giải thích ở đoạn đầu của code rồi
        } catch (IOException ex) {
            Logger.getLogger(FileChooserDemo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileChooserDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileChooserDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileChooserDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileChooserDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(TableDemo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(TableDemo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(TableDemo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(TableDemo.class.getName()).log(Level.SEVERE, null, ex);
                }
                new FileChooserDemo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem cb_wrap_line;
    private javax.swing.JCheckBoxMenuItem cb_wrap_word;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem miexit;
    private javax.swing.JMenuItem minew;
    private javax.swing.JMenuItem miopen;
    private javax.swing.JMenuItem miredo;
    private javax.swing.JMenuItem misave;
    private javax.swing.JMenuItem miundo;
    private javax.swing.JTextArea tafile;
    // End of variables declaration//GEN-END:variables
}
